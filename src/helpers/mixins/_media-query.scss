/// Wrap all its content into a media query based on given arguments
/// 
/// @access public
/// @group helper-mixins
/// @author Alain D'Ettorre <alain.det@gmail.com>
/// @require {function} pal-store-get
/// @content Rules to wrap in a @media query
///
/// @example scss Wrap @content into a @media query for tablets only
///   @include pal-media-query('tablet', 'in') { .foo { color: red } }
///   // @media screen and (min-width: 768px) { .foo { color: red } }
/// 
/// @param {String} $device ['*'] The device name
/// @param {String | Null} $operator [null] The device operator (like 'in' or 'up')
/// @output Input rules wrapped in a custom @media query
///
@mixin pal-media-query($device: '*', $operator: null)
{
  @if ($device == '*' or $device == 'any') {
    @content;
  } @else {

    @if ($operator == null) {
      $operator: pal-store-get('pal.media-query.operator');
    }

    $range: pal-store-get('devices.#{$device}');
    $min: nth($range, 1);
    $max: nth($range, 2);

    @if ($operator == 'down') {
      @media screen and (max-width: $max) {
        @content;
      }
    }

    @else if ($operator == 'in') {
      @media screen and (min-width: $min) and (max-width: $max) {
        @content;
      }
    }

    @else if ($operator == 'up') {
      @media screen and (min-width: $min) {
        @content;
      }
    }
  }
}
