/// Casts a string to a number. Works with negative and decimals numbers too
///
/// @access public
/// @group helper-functions-string
/// @author Alain D'Ettorre <alain.det@gmail.com>
///
/// @example scss
///   pal-string-to-number('123') // 123
///   pal-string-to-number('-45.67') // -45.67
///   pal-string-to-number('-8.9') + 1 // -7.9'
///
/// @param {String | Number} $input
/// @return {Number}
///
@function pal-string-to-number($input)
{
  // Forbid non-strings
  @if (type-of($input) != 'string') {
    @return null;
  }

  @if (type-of($input) == 'number') {
    @return $input;
  }

  $numbers: (
    '0': 0,
    '1': 1,
    '2': 2,
    '3': 3,
    '4': 4,
    '5': 5,
    '6': 6,
    '7': 7,
    '8': 8,
    '9': 9
  );
  $output: 0;
  $digits: 0;
  $is-negative: false;

  // Negative?
  @if (str-slice($input, 1, 1) == '-') {
    $is-negative: true;
    $input: str-slice($input, 2);
  }

  // Calculate maximum power of 10
  $dot-index: str-index($input, '.');
  $integers: str-length($input);
  @if ($dot-index != null) {
    $integers: $integers - str-length(str-slice($input, $dot-index));
  }
  $power: pal-number-pow(10, $integers - 1);

  @for $i from 1 through str-length($input) {
    $char: str-slice($input, $i, $i);
    @if ($char != '.') {
      $output: $output + map-get($numbers, $char) * $power;
      $power: $power / 10;
    }
  }

  @if ($is-negative) {
    $output: (-1) * $output;
  }

  @return $output;
}
