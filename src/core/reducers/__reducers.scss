/// Runs all the reducers. By default, reducers must create
///
/// @access private
/// @group core-reducers
/// @author Alain D'Ettorre <alain.det@gmail.com>
/// @require {function} _pal-devices-reducer
/// @require {function} _pal-relative-units-reducer
/// @require {function} _pal-unit-reducer
/// @require {function} _pal-units-reducer
/// 
/// @param {Map} $state The current state
/// @param {Map} $action Contains the type (store key) and the payload (new value)
/// @return {MAp} The new state
///
@function _pal-reducers($state, $action)
{
  $new-state: ();

  $new-state: _pal-devices-reducer($state, $action);
  $new-state: _pal-relative-units-reducer($new-state, $action);
  $new-state: _pal-unit-reducer($new-state, $action);
  $new-state: _pal-units-reducer($new-state, $action);

  @if (function-exists('pal-custom-reducers') == true) {
    $new-state: pal-custom-reducers($new-state, $action);
  }

  // If state did not change at all (no reducer executed),
  // add/override key manually
  @if (pal-compare($state, $new-state) == true) {
    $key: map-get($action, 'type');
    $value: map-get($action, 'payload');
    $new-state: map-merge($new-state, ( #{$key}: $value ));
  }

  @return $new-state;
}
