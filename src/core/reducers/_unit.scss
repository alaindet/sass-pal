/// Adjusts all existing units with the new base unit
/// Stores 'unit' and 'units'
///
/// @access private
/// @group core-reducers
/// @author Alain D'Ettorre <alain.det@gmail.com>
/// @require {function} pal-number-decimals
/// @require {function} pal-get
///
/// @param {Map} $state
/// @param {Map} $action
/// @return {Map}
///
@function _pal-unit-reducer($state, $action)
{
  @if (map-get($action, 'type') != 'unit') {
    @return $state;
  }

  $units: map-get($state, 'units');
  $new-unit: map-get($action, 'payload');

  // No units yet
  @if ($units == null) {
    @return map-merge($state, ( 'unit': $new-unit ));
  }

  $old-unit: map-get($state, 'unit');

  @each $label, $factor in $units {
    $value: $factor * ( $new-unit / $old-unit );
    $value: pal-number-decimals($value, pal-get('pal.decimals'));
    $units: map-merge($units, ( #{$label}: $value ));
  }

  @return map-merge($state, (
    'unit': $new-unit,
    'units': $units,
  ));
}
