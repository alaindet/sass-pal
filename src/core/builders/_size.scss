/// Sass Pal builder for size rules (width, height, min-* and max-*). Sizes 
/// follow the syntax
///
/// `{RULE_ABBREVIATION}-{RELATIVE_UNIT}`
///
/// Where
/// - `RULE_ABBREVIATION` is any of *w*, *w-min*, *w-max*, *h*, *h-min*, *h-max*
/// - `RELATIVE_UNIT` is one of the labels from the *relative-units* stored value, ex.: '1/2', 'full'
///
/// @access public
/// @group core-builders
/// @author Alain D'Ettorre <alain.det@gmail.com>
/// @require {function} pal-get
/// @require {function} pal-list-sort-by-length
///
/// @example scss Set width and height with word aliases as size
///   pal-size(w-half h-full);
///   // width: 50%;
///   // height: 100%;
/// @example scss Set width and height with fractions
///   pal-size(w-1/2 h-3/4);
///   // width: 50%:
///   // height: 75%;
/// @example scss Use absolute units
///   pal-size(w-3u h-4u);
///   // width: 1.5rem;
///   // height: 2rem;
///
/// @param {Map} $sizes
/// @output Size related rules
/// 
@mixin pal-size($sizes)
{
  @content;

  $rules: (
    'wmax': 'max-width',
    'wmin': 'min-width',
    'w': 'width',
    'hmax': 'max-height',
    'hmin': 'min-height',
    'h': 'height',
  );

  $width-rules: 'wmax', 'wmin', 'w';

  $rule-keys: map-keys($rules);

  @each $size in $sizes {
    
    $rule-key: null;
    $value-key: null;
    $rule: null;
    $value: null;
    $found: false;

    // Extract keys for rule (ex.: w-max) and value (ex.: 1/2)
    @each $key in $rule-keys {
      $left-part: str-slice($size, 1, str-length($key));
      $is: $left-part == $key;
      @if ($found == false and $left-part == $key) {
        $found: true;
        $right-part: str-slice($size, str-length($key) + 2); // Skip the -
        $rule-key: $left-part;
        $value-key: $right-part;
      }
    }

    // Absolute 'screen' value
    @if ($value-key == 'screen') {
      $is-width-rule: index($width-rules, $rule-key) != null;
      $value: if($is-width-rule, 100vw, 100vh);
    }

    // Absolute unit with 'u' suffix
    @else if (str-slice($value-key, -1) == 'u') {
      $value-key: str-slice($value-key, 0, str-length($value-key) - 1);
      $value: pal-get('units.#{$value-key}');
    }
    
    // Relative unit with '%' suffix
    @else if (str-slice($value-key, -1) == '%') {
      $value-key: str-slice($value-key, 0, str-length($value-key) - 1);
      $value: pal-get('relative-units.#{$value-key}');
    }

    // Default: relative unit with no suffix
    @else {
      $value: pal-get('relative-units.#{$value-key}');
    }

    // Declaration
    @if ($rule-key != null) {
      $rule: map-get($rules, $rule-key);
      #{$rule}: $value;
    }

  }
}
