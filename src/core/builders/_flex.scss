/// Sass Pal builder for Flexbox rules. All properties are optional. All passed values
/// can be either a custom value (ex.: grow: 'more'), an **alias** (ex.: 'start'
/// for 'flex-start') or any native value for that CSS rule
///
///
/// # Shortcut
/// If input is 'center', output the rules for centering content
/// (see *Shortcut with 'center'* example)
///
/// # Aliases
/// - `start` for `flex-start`
/// - `end` for `flex-end`
/// - `between` for `space-between`
/// - `around` for `space-around`
///
/// # Properties for flex containers
/// - `dir`
///   - *type*: String
///   - *note*: Accepts anything `flex-direction` accepts
/// - `inline`
///   - *type*: Bool
///   - *note*: Outputs `display: inline-flex`
/// - `wrap`
///   - *type*: Bool
///   - *values*: true|false
/// - `main-axis`
///   - *type*: String
///   - *aliases*: start|end|between|around
///   - *note*: Accepts anything `justify-content` accepts
/// - `cross-axis`
///   - *type*: String
///   - *aliases*: start|end
///   - *note*: Accepts anything `align-items` accepts
/// - `cross-lines`
///   - *type*: String
///   - *aliases*: start|center|end|between|around
///   - *note*: Accepts anything `align-content` accepts
///
/// # Properties for flex items
/// - `self-align`
///   - *type*: String
///   - *alias*: start|end
///   - *note*: Accepts anything `align-self` accepts
/// - `basis`
///   - *type*: Number|String
///   - *values*: Any of the defined `relative-units` (ex.: 'third')
///   - *note*: Accepts anything `flex-basis` accepts
/// - `grow`
///   - *type*: Number|String
///   - *values*: 'no'|'normal'|'more' or custom Number
///   - *note*: Accepts anything `flex-grow` accepts
/// - `shrink`
///   - *type*: Number|String
///   - *values*: 'least'|'less'|'normal'|'more'|'most' or custom Number
///   - *note*: Accepts anything `flex-shrink` accepts
/// - `order`
///   - *type*: Number|String
///   - *values*: 'first'|'last' or custom Number
///   - *note*: Accepts anything `order` accepts
/// - `flex`
///   - *type*: List
///   - *values*: Any valid List for native `flex` CSS rule
///
/// @access public
/// @group core-builders
/// @author Alain D'Ettorre <alain.det@gmail.com>
///
/// @example scss Shortcut with 'center'
///   .shortcut {
///     @include pal-flex('center');
///   }
///   // .shortcut {
///   //   display: flex;
///   //   justify-content: center;
///   //   align-items: center;
///   // }
/// @example scss A flex container
///   .container {
///     @include pal-flex((
///       main-axis: end,
///       cross-axis: stretch
///     ));
///   }
///   // .container {
///   //   display: flex;
///   //   justify-content: flex-end;
///   //   align-items: stretch;
///   // }
/// @example scss A flex item
///   .item {
///     @include pal-flex((basis: '1/3'));
///   }
///   .item-big {
///     @include pal-flex((grow: more));
///   }
///   // .item {
///   //   flex-basis: 33.33333%;
///   // }
///   // .item-big {
///   //   flex-grow: 2;
///   // }
///
/// @param {Map | String} $map
/// @output Flexbox rules
///
@mixin pal-flex($map)
{
  @content;

  @if ($map == 'center') {
    display: flex;
    justify-content: center;
    align-items: center;
  } @else {

    // Output display: flex|inline-flex only for Flexbox containers!
    $requires-display: ('dir', 'wrap', 'main-axis', 'cross-axis', 'cross-lines');
    @if (pal-map-is-any-key($map, $requires-display)) {

      // Container: Inline
      @if (map-get($map, 'inline') == true) {
        display: inline-flex;
      } @else {
        display: flex;
      }
    }

    // Container: Direction
    $value: map-get($map, 'dir');
    $allowed: 'row','row-reverse','column','column-reverse';
    @if ($value != null and index($allowed, $value) != null) {
      flex-direction: #{$value};
    }

    // Container: Wrap
    @if (map-get($map, 'wrap') == true) {
      flex-wrap: wrap;
    }

    // Container: Main axis alignment
    $value: map-get($map, 'main-axis');
    @if ($value != null) {

      $values: (
        'start': 'flex-start',
        'end': 'flex-end',
        'between': 'space-between',
        'around': 'space-around',
      );
      $allowed: map-keys($values);

      // Controlled value
      @if (index($allowed, $value)) {
        $value: map-get($values, $value);
      }

      justify-content: #{$value};
    }

    // Container: Cross axis alignment
    $value: map-get($map, 'cross-axis');
    @if ($value != null) {

      $values: (
        'start': 'flex-start',
        'end': 'flex-end',
      );
      $allowed: map-keys($values);

      // Controlled value
      @if (index($allowed, $value)) {
        $value: map-get($values, $value);
      }

      align-items: #{$value};
    }

    // Container: Cross axis lines alignment
    $value: map-get($map, 'cross-lines');
    @if ($value != null) {

      $values: (
        'start': 'flex-start',
        'end': 'flex-end',
        'between': 'space-between',
        'around': 'space-around',
      );
      $allowed: map-keys($values);

      // Controlled value
      @if (index($allowed, $value)) {
        $value: map-get($values, $value);
      }

      align-content: #{$value};
    }

    // Container: Flex shorthand
    $value: map-get($map, 'flex');
    @if ($value != null) {
      flex: $value;
    }

    // Item: alignment
    $value: map-get($map, 'self-align');
    @if ($value != null) {

      $values: (
        'start': 'flex-start',
        'end': 'flex-end',
      );
      $allowed: map-keys($values);

      // Controlled value
      @if (index($allowed, $value)) {
        $value: map-get($values, $value);
      }

      align-self: #{$value};
    }

    // Item: width
    $value: map-get($map, 'basis');
    @if ($value != null) {

      $relative-unit: map-get(pal-get('relative-units'), $value);

      @if ($relative-unit != null) {
        $value: $relative-unit;
      }

      flex-basis: $value;
    }

    // Item: Grow
    $value: map-get($map, 'grow');
    @if ($value != null) {

      $values: (
        'no': 0,
        'normal': 1,
        'more': 2,
      );

      @if (map-get($values, $value) != null) {
        $value: map-get($values, $value);
      }

      flex-grow: $value;
    }

    // Item: Shrink
    $value: map-get($map, 'shrink');
    @if ($value != null) {
      
      $values: (
        'least': 0.25,
        'less': 0.5,
        'normal': 1,
        'more': 2,
        'most': 4,
      );

      @if (map-get($values, $value) != null) {
        $value: map-get($values, $value);
      }

      flex-shrink: $value;
    }

    // Item: Order
    $value: map-get($map, 'order');
    @if ($value != null) {

      $values: (
        'first': -1000,
        'last': 1000,
      );

      @if (map-get($values, $value) != null) {
        $value: map-get($values, $value);
      }

      order: $value;
    }
  }
}
