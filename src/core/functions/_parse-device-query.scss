/// Breaks down an input **device query** into a map with properties. A *device
/// query* is a string following this syntax
/// 
/// `{DEVICE}{OPERATOR}{PSEUDO_CLASS}`
/// 
/// Where
/// - `DEVICE` can be any allowed device or * wildcard for 'all devices'
/// - `OPERATOR` can be
///   - '+' meaning 'from DEVICE min resolution upward'
///   - '-' meaning 'from DEVICE max resolution downward'
///   - '' or '=' means 'between DEVICE min and max resolution only'
/// - `PSEUDO_CLASS` can be any pseudo-class (see `pseudo-classes` stored value for more), ex.:
///   - ':hover'
///   - ':focus'
///   - ':active'
///
/// @access private
/// @group core-functions
/// @author Alain D'Ettorre <alain.det@gmail.com>
/// @require {function} pal-get
/// @require {function} pal-string-starts-with
///
/// @example scss Parse device query from tablet downward for hover state
///   _pal-parse-device-query('tablet-:hover')
///   // (
///   //   device: 'tablet',
///   //   operator: 'down'
///   //   pseudo-class: 'hover'
///   // )
///
/// @param {String} $query Device query to parse
/// @return {Map} Parsed query into separate properties of this map
///
@function _pal-parse-device-query($query)
{
  $parsed: (
    'device': 'any',
    'operator': 'in',
    'pseudo-class': 'any',
  );

  $temp: $query;

  // Get device
  $device-keys: map-keys(pal-get('devices'));
  $device-keys: append($device-keys, 'any');
  $device-keys: append($device-keys, '*');
  $found: false;
  @each $key in $device-keys {
    @if ($found == false and pal-string-starts-with($temp, $key)) {
      $found: true;
      $temp: str-slice($temp, str-length($key) + 1);
      $parsed: map-merge($parsed, ('device': $key));
    }
  }

  // Get operator
  $operators: pal-get('pal.media-query.operators');
  $operator-symbols: map-keys($operators);
  $found: false;
  @each $symbol in $operator-symbols {
    @if ($found == false and pal-string-starts-with($temp, $symbol)) {
      $found: true;
      $temp: str-slice($temp, str-length($symbol) + 1);
      $operator: map-get($operators, $symbol);
      $parsed: map-merge($parsed, ('operator': $operator));
    }
  }

  // Get pseudo-class
  $pseudo-classes: pal-get('pseudo-classes');
  $found: false;
  @each $pseudo-class in $pseudo-classes {
    @if ($found == false and pal-string-starts-with($temp, $pseudo-class)) {
      $found: true;
      $pseudo-class-name: str-slice($pseudo-class, 2);
      $parsed: map-merge($parsed, ('pseudo-class': $pseudo-class-name));
    }
  }

  @return $parsed;
}
