/// Groups request maps by the same device query so that Sass Pal will output
/// less @media queries. Device queries differing only in pseudo-classes are
/// grouped together
///
/// @access private
/// @author Alain D'Ettorre <alain.det@gmail.com>
/// @group core-functions
///
/// @example scss Numbers replace real request maps for readability
///   $map: (
///     'mobile+': 111,
///     'mobile+:hover': 222,
///     'mobile+:focus': 333,
///     'tablet+': 444,
///     'tablet:hover': 555,
///     'desktop': 666,
///   );
///   
///   $grouped: _pal-group-by-device-query($map);
///   
///   @debug($grouped);
///   // (
///   //   (
///   //     'query': (
///   //       'device': 'mobile',
///   //       'operator': 'up',
///   //     ),
///   //     'request-maps': (
///   //       'any': 111,
///   //       'hover': 222,
///   //       'focus': 333,
///   //     ),
///   //   ),
///   //   (
///   //     'query': (
///   //       'device': 'tablet',
///   //       'operator': 'up',
///   //     ),
///   //     'request-maps': (
///   //       'any': 444,
///   //     ),
///   //   ),
///   //   (
///   //     'query': (
///   //       'device': 'tablet',
///   //       'operator': 'in',
///   //     ),
///   //     'request-maps': (
///   //       'hover': 555
///   //     ),
///   //   ),
///   //   (
///   //     'query': (
///   //       'device': 'desktop',
///   //       'operator': 'in',
///   //     ),
///   //     'request-maps': (
///   //       'any': 666,
///   //     )
///   //   ),
///   // );
///
/// @param {Map} $map A multi-request map
/// @return {List} List of device-scoped request maps
///
@function _pal-group-by-device-query($map)
{
  $result: ();

  @each $query, $request-map in $map {

    // Parse the query
    $parsed: _pal-parse-device-query($query);
    $device: map-get($parsed, 'device');
    $operator: map-get($parsed, 'operator');
    $pseudo-class: map-get($parsed, 'pseudo-class');

    // Build the device query without the pseudo-class
    $key: '#{$device}#{$operator}';

    // Create new node on result map
    @if (map-has-key($result, $key) == false) {
      $result: map-merge($result, (
        #{$key}: (
          'query': (
            'device': $device,
            'operator': $operator,
          ),
          'request-maps': (
            '#{$pseudo-class}': $request-map,
          ),
        )
      ));
    }
    
    // Add to existing node on result map
    @else {
      $old-node: map-get($result, #{$key});
      $old-utils: map-get($old-node, 'request-maps');
      $new-utils: map-merge($old-utils, ('#{$pseudo-class}': $request-map));
      $new-node: map-merge($old-node, ('request-maps': $new-utils));
      $result: map-merge($result, (#{$key}: $new-node));
    }
  }

  @return map-values($result);
}
