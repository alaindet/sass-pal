/// Map of all Pal's defaults. These cannot be modified, just patched with custom variables
///
/// @type Map
/// @group core-variables
/// @prop {List} constants.builders - List of all Pal's builder mixins
/// @prop {Map} constants.devices - Map of all devices. Key: name, value: list of (min, max) resolutions
/// @prop {Map} constants.media-query - Map of all media-query related meta data
/// @prop {String} constants.media-query.operator - Default media query operator
/// @prop {Map} constants.media-query.operators - Map of all media query operators. Key: symbol, value: label
/// @prop {Map} constants.sides - Map of all sides of a rectangle. Key: abbrev, value: list of sides
$pal-constants: (

  // Sass-Pal builder names
  'builders': (
    'border',
    'display',
    'flex',
    'position',
    'size',
    'space',
  ),

  // Colors
  'colors': (
    'black': #333333,
    'white': #f8f8f8,
    'gray-dark': #2d3748,
    'gray': #a0aec0,
    'gray-light': #edf2f7,
    'red-dark': #9b2c2c,
    'red': #e53e3e,
    'red-light': #fc8181,
    'orange-dark': #9c4221,
    'orange': #ed8936,
    'orange-light': #fbd38d,
    'yellow-dark': #b7791f,
    'yellow': #f6e05e,
    'yellow-light': #fefcbf,
    'green-dark': #276749,
    'green': #48bb78,
    'green-light': #9ae6b4,
    'teal-dark': #285e61,
    'teal': #38b2ac,
    'teal-light': #b2f5ea,
    'blue-dark': #2c5282,
    'blue': #4299e1,
    'blue-light': #bee3f8,
    'indigo-dark': #434190,
    'indigo': #667eea,
    'indigo-light': #c3dafe,
    'purple-dark': #553c9a,
    'purple': #9f7aea,
    'purple-light': #e9d8fd,
    'pink-dark': #97266d,
    'pink': #ed64a6,
    'pink-light': #fed7e2,
  ),

  // Availables devices (used for media queries)
  'devices': (
    'mobile': (320px, 768px - 0.001px),
    'tablet': (768px, 1024px - 0.001px),
    'desktop': (1024px, 1440px - 0.001px),
    'over': (1440px, 9999px),
  ),

  // Media query operators
  'media-query': (
    // Default operator
    'operator': 'in',
    'operators': (
      '=': 'in',
      '-': 'down',
      '+': 'up',
    ),
  ),

  // Available pseudo-classes
  'pseudo-classes': (
    ':hover',
    ':focus',
    ':active',
    ':first-child',
    ':last-child',
    ':disabled',
    ':enabled',
    ':checked',
    ':empty',
  ),

  // These are percentages used for fractions of parent elements
  'relative-units': (
    '1/12': 100% * 1 / 12,
    '2/12': 100% * 2 / 12,
    '3/12': 100% * 3 / 12,
    '4/12': 100% * 4 / 12,
    '5/12': 100% * 5 / 12,
    '6/12': 100% * 6 / 12,
    '7/12': 100% * 7 / 12,
    '8/12': 100% * 8 / 12,
    '9/12': 100% * 9 / 12,
    '10/12': 100% * 10 / 12,
    '11/12': 100% * 11 / 12,
    '12/12': 100% * 12 / 12,
    '1/8': 100% * 1 / 8,
    '1/4': 100% * 1 / 4,
    '1/3': 100% * 1 / 3,
    '2/5': 100% * 2 / 5,
    '1/2': 100% * 1 / 2,
    '2/3': 100% * 2 / 3,
    '3/4': 100% * 3 / 4,
    'quarter': 100% * (1 / 4),
    'third': 100% * (1 / 3),
    'half': 100% * (1 / 2),
    'full': 100%,
    'auto': auto,
  ),

  // All sides combination of a rectangle
  'sides': (

    // One side
    't': ('top'),
    'r': ('right'),
    'b': ('bottom'),
    'l': ('left'),

    // Two sides
    'x': ('right', 'left'),
    'y': ('top', 'bottom'),

    // Three sides
    '-t': ('right', 'bottom', 'left'),
    '-r': ('top', 'bottom', 'left'),
    '-b': ('top', 'right', 'left'),
    '-l': ('top', 'right', 'bottom'),
    '^t': ('right', 'bottom', 'left'), // Alias of -t
    '^r': ('top', 'bottom', 'left'), // Alias of -r
    '^b': ('top', 'right', 'left'), // Alias of -b
    '^l': ('top', 'right', 'bottom'), // Alias of -l

    // All sides
    '*': ('top', 'right', 'bottom', 'left'),
  ),

  // The base unit
  'unit': 0.5rem,

  // These factors are later multiplied by the base unit
  // Ex.: units.5 => 2.5rem
  'units': (
    '0': 0,
    '1/8': 1/8,
    '1/4': 1/4,
    '1/3': 1/3,
    '1/2': 1/2,
    '3/5': 3/5,
    '2/3': 2/3,
    '3/4': 3/4,
    '1': 1,
    '2': 2,
    '3': 3,
    '4': 4,
    '5': 5,
    '6': 6,
    '7': 7,
    '8': 8,
    '9': 9,
    '10': 10,
    '11': 11,
    '12': 12,
    '13': 13,
    '14': 14,
    '15': 15,
    '16': 16,
  ),
);

// Override with custom values
@if (variable-exists('pal-overrides')) {

  // List of forbidden keys
  $pal-forbidden-keys: ('builders', 'media-query', 'sides');

  @each $key, $value in $pal-overrides {
    $is-overridable: index($pal-forbidden-keys, $key) == null;
    @if ($is-overridable) {
      $new-value: (#{$key}: $value);
      $pal-constants: map-merge($pal-constants, $new-value);
    }
  }
}

// Process 'units' key
$units: map-get($pal-constants, 'units');
$unit: map-get($pal-constants, 'unit');
@each $label, $factor in $units {
  // Zero should remain unit-less
  $value: if($label == '0', 0, $factor * $unit);
  $units: map-merge($units, (#{$label}: $value));
}
$pal-constants: map-merge($pal-constants, ('units': $units));
