/// Map of all Pal's defaults. These cannot be modified, just patched with custom variables
///
/// @type Map
/// @prop {List} constants.builders - List of all Pal's builder mixins
/// @prop {Map} constants.devices - Map of all devices. Key: name, value: list of (min, max) resolutions
/// @prop {Map} constants.media-query - Map of all media-query related meta data
/// @prop {String} constants.media-query.operator - Default media query operator
/// @prop {Map} constants.media-query.operators - Map of all media query operators. Key: symbol, value: label
/// @prop {Map} constants.sides - Map of all sides of a rectangle. Key: abbrev, value: list of sides
$pal-constants: (
  'builders': (
    'border',
    'display',
    'flex',
    'position',
    'size',
    'space',
  ),
  'devices': (
    'mobile': (320px, 768px - 0.001px),
    'tablet': (768px, 1024px - 0.001px),
    'desktop': (1024px, 1440px - 0.001px),
    'over': (1440px, 9999px),
  ),
  'media-query': (
    'operator': 'in',
    'operators': (
      '=': 'in',
      '-': 'down',
      '+': 'up',
    ),
  ),
  // These are percentages used for fractions of parent elements
  'relative-units': (
    '1/12': 100% * 1 / 12,
    '2/12': 100% * 2 / 12,
    '3/12': 100% * 3 / 12,
    '4/12': 100% * 4 / 12,
    '5/12': 100% * 5 / 12,
    '6/12': 100% * 6 / 12,
    '7/12': 100% * 7 / 12,
    '8/12': 100% * 8 / 12,
    '9/12': 100% * 9 / 12,
    '10/12': 100% * 10 / 12,
    '11/12': 100% * 11 / 12,
    '12/12': 100% * 12 / 12,
    '1/8': 100% * 1 / 8,
    '1/4': 100% * 1 / 4,
    '1/3': 100% * 1 / 3,
    '2/5': 100% * 2 / 5,
    '1/2': 100% * 1 / 2,
    '2/3': 100% * 2 / 3,
    '3/4': 100% * 3 / 4,
    'quarter': 100% * (1 / 4),
    'third': 100% * (1 / 3),
    'half': 100% * (1 / 2),
    'full': 100%,
    'auto': auto,
  ),
  'sides': (
    't': ('top'),
    'r': ('right'),
    'b': ('bottom'),
    'l': ('left'),
    'x': ('top', 'bottom'),
    'y': ('right', 'left'),
    '-t': ('right', 'bottom', 'left'),
    '-r': ('bottom', 'left', 'top'),
    '-b': ('top', 'right', 'left'),
    '-l': ('top', 'right', 'bottom'),
    '*': ('top', 'right', 'bottom', 'left'),
  ),
  'unit': 0.5rem,
  // The factors are later multiplied
  'units': (
    '1/8': 1/8,
    '1/4': 1/4,
    '1/3': 1/3,
    '1/2': 1/2,
    '3/5': 3/5,
    '2/3': 2/3,
    '3/4': 3/4,
    '1': 1,
    '2': 2,
    '3': 3,
    '4': 4,
    '5': 5,
    '6': 6,
    '7': 7,
    '8': 8,
    '9': 9,
    '10': 10,
    '11': 11,
    '12': 12,
    '13': 13,
    '14': 14,
    '15': 15,
    '16': 16,
  ),
);

// Override with custom values
@if (variable-exists('pal-overrides')) {

  // List of overridable keys
  $pal-overridable-keys: ('devices', 'relative-units', 'unit', 'units');

  @each $key, $value in $pal-overrides {
    $is-overridable: index($pal-overridable-keys, $key) != null;
    @if ($is-overridable) {
      $new-value: (#{$key}: $value);
      $pal-constants: map-merge($pal-constants, $new-value);
    }
  }
}

// Process 'units' key
$units: map-get($pal-constants, 'units');
$unit: map-get($pal-constants, 'unit');
@each $label, $factor in $units {
  $value: $factor * $unit;
  $units: map-merge($units, (#{$label}: $value));
}
$pal-constants: map-merge($pal-constants, ('units': $units));
