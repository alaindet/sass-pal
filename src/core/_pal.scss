/// The entry point of the whole Sass Pal system. **Utility maps** have a builder
/// mixin name as keys and actual instructions as values (whose type depends on
/// the builder). You can provide a more complex map to scope utility maps on
/// specific devices, so that keys are **device queries** (defining resolution
/// ranges, media query operatoror and optional states) and values are scoped
/// utility maps.
///
/// @todo Add examples
/// @access public
/// @group core
/// @author Alain D'Ettorre <alain.det@gmail.com>
/// @require {function} _pal-has-any-device-query
/// @require {function} _pal-group-by-device-query
/// @require {function} pal-map-get
/// @require {mixin} _pal-builder
/// @require {mixin} pal-media-query
/// @require {mixin} pal-pseudo-class
/// 
/// @example scss
/// 
/// @param {Map} $map Can be a *utility map* or a map of *utility maps* by *device queries*
/// @output A set of rules as described by provided utility map(s)
///
@mixin pal($map)
{
  // Single utility map with no device query
  @if (_pal-has-any-device-query($map) == false) {
    @each $builder-name, $builder-value in $map {
      @include _pal-builder($builder-name, $builder-value);
    }
  }


  // Multiple utility maps grouped by device query
  @else {
    @each $group in _pal-group-by-device-query($map) {

      $device: pal-map-get($group, 'query.device');
      $operator: pal-map-get($group, 'query.operator');
      $utility-maps: pal-map-get($group, 'utility-maps');

      @include pal-media-query($device, $operator) {
        @each $pseudo-class, $utility-map in $utility-maps {
          @include pal-pseudo-class($pseudo-class) {
            @each $builder-name, $builder-value in $utility-map {
              @include _pal-builder($builder-name, $builder-value);
            }
          }
        }
      }
    }
  }
}
